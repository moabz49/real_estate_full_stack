//  "npx prisma generate" in your terminal. this will generate the prisma client for you to use in your code.
// This is used to configure the generator client so that we get auto-completion & type checking.
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url =env("DATABASE_URL")

}

model User {
    // We are sying that the is should be a string and in MongoDB it should apear as _id but when we make request it should be id. Pretty much ensuring it has the same functionality that a normal autogenerated id off MONGODB should have
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String?
    email String @unique
    image String?
    bookedVisits Json[]
    // marked with @db.ObjectId, implying they will be treated as ObjectIds in MongoDB.
    favResidenciesID String[] @db.ObjectId
    // A relation indicating that a user can own multiple residencies. This is a one-to-many relationship with the Residency model, specified with the @relation directive.
    ownedResidencies Residency[] @relation("Owner")

}

model Residency {
    // id: A manually defined unique identifier for users. It's a string field that will be represented as _id in MongoDB. The @default(auto()) directive implies
    //  it will generate an autogenerated value. The @db.ObjectId annotation specifies that it should be treated as an ObjectId in MongoDB.
    id String @id @default(auto()) @map("_id") @db.ObjectId
    title String
    description String
    price Int
    address String
    city String
    country String
    image String
    facilities Json
    // The email of the user who owns this residency. This forms a relationship with the User model through the owner field, specified with the @relation directive.
    userEmail String
    // Every Owner of Residency is an instance of User Schema by default 
    owner User @relation("Owner", fields: [userEmail], references: [email])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt 
    // The address should also be unique as well as the Email 
    @@unique(fields: [address, userEmail])
}
// The schema sets up relationships between users and residencies: a user can own multiple residencies (ownedResidencies in User), and each residency is linked to an owner (via userEmail in Residency).

